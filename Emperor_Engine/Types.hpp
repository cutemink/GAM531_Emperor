#ifndef __EMP_TYPES_HPP__
#define __EMP_TYPES_HPP__

#include "Common.hpp"

namespace Emperor
   {

   //Formats
   enum StructureFormat
      {
      SF_UNKNOWN_FORMAT,
      SF_4X4BYTE_TYPELESS,
      SF_4X4BYTE_FLOAT,
      SF_4X4BYTE_UINT,
      SF_4X4BYTE_SINT,
      SF_3X4BYTE_TYPELESS,
      SF_3X4BYTE_FLOAT,
      SF_3X4BYTE_UINT,
      SF_3X4BYTE_SINT,
      SF_2X4BYTE_TYPELESS,
      SF_2X4BYTE_FLOAT,
      SF_2X4BYTE_UINT,
      SF_2X4BYTE_SINT,
      SF_1X4BYTE_TYPELESS,
      SF_1X4BYTE_FLOAT,
      SF_1X4BYTE_UINT,
      SF_1X4BYTE_SINT,
      SF_4X2BYTE_TYPELESS,
      SF_4X2BYTE_FLOAT,
      SF_4X2BYTE_UINT,
      SF_4X2BYTE_SINT,
      //No 3x2 support
      SF_2X2BYTE_TYPELESS,
      SF_2X2BYTE_FLOAT,
      SF_2X2BYTE_UINT,
      SF_2X2BYTE_SINT,
      SF_1X2BYTE_TYPELESS,
      SF_1X2BYTE_FLOAT,
      SF_1X2BYTE_UINT,
      SF_1X2BYTE_SINT,
      SF_4X1BYTE_TYPELESS,
      //No 4x1 floats
      SF_4X1BYTE_UINT,
      SF_4X1BYTE_SINT,
      //No 3x1 support
      SF_2X1BYTE_TYPELESS,
      //No 4x1 floats
      SF_2X1BYTE_UINT,
      SF_2X1BYTE_SINT,
      SF_1X1BYTE_TYPELESS,
      //No 1x1 floats
      SF_1X1BYTE_UINT,
      SF_1X1BYTE_SINT,
      SF_DEPTH_STENCIL,
      SF_DEPTH,
      SF_STENCIL
      };

   //Blend state
   enum BlendOption
      {
      BO_ZERO,
      BO_ONE,
      BO_SRC_COLOR,
      BO_INV_SRC_COLOR,
      BO_SRC_ALPHA,
      BO_INV_SRC_ALPHA,
      BO_DEST_ALPHA,
      BO_INV_DEST_ALPHA,
      BO_DEST_COLOR,
      BO_INV_DEST_COLOR,
      BO_SRC_ALPHA_SAT,
      BO_BLEND_FACTOR,
      BO_INV_BLEND_FACTOR,
      BO_SRC1_COLOR,
      BO_INV_SRC1_COLOR,
      BO_SRC1_ALPHA,
      BO_INV_SRC1_ALPHA
      };

   enum BlendOperation
      {
      BO_ADD,
      BO_SUBTRACT,
      BO_REV_SUBTRACT,
      BO_MIN,
      BO_MAX
      };

   struct BlendStateDescription 
      {
      bool blendEnabled;
      BlendOption srcBlend;
      BlendOption destBlend;
      BlendOperation blendOp;
      BlendOption srcBlendAlpha;
      BlendOption destBlendAlpha;
      BlendOperation blendOpAlpha;
      uint8 writeMask;
      BlendStateDescription() : blendEnabled(false), srcBlend(BO_ONE), destBlend(BO_INV_SRC_ALPHA), 
         srcBlendAlpha(BO_ONE), destBlendAlpha(BO_ZERO), writeMask(0x0f), blendOp(BO_ADD), 
         blendOpAlpha(BO_ADD) {}
      };

   //Render State
   enum FillMode
      {
      FM_POINT,
      FM_WIREFRAME,
      FM_SOLID
      };

   enum CullMode
      {
      CL_NONE,
      CL_FRONT,
      CL_BACK
      };

   struct RasterizerStateDescription
      {
      FillMode fillMode;
      CullMode cullMode;
      bool windCounterClockwise;
      int depthBias;
      float depthBiasClamp;
      float slopeScaledDepthBias;
      bool depthClipEnabled;
      bool scissorEnabled;
      bool multisamplEnabled;
      bool antialiasedLineEnabled;

      RasterizerStateDescription() : fillMode(FM_SOLID), cullMode(CL_BACK), 
         windCounterClockwise(false), depthBias(0), depthBiasClamp(0),
         slopeScaledDepthBias(0), depthClipEnabled(false), scissorEnabled(false),
         multisamplEnabled(false), antialiasedLineEnabled(false) {}
      };


   //Light
   enum LightType 
      {
      LT_DIRECTIONAL,
      LT_POINT,
      LT_SPOT
      };

   //Vertex

   struct InputElement
      {
      String sem;
      uint32 semCount;
      StructureFormat format;
      uint32 input;
      uint32 aligned;
      uint32 bsize;
      };

   //primitives
   enum PrimitiveTopologyEnum
      {
      PT_POINT_LIST,
      PT_LINE_LIST,
      PT_LINE_STRIP,
      PT_TRIANGLE_LIST,
      PT_TRIANGLE_STRIP,
      PT_LINE_LIST_ADJ,
      PT_LINE_STRIP_ADJ,
      PT_TRIANGLE_LIST_ADJ,
      PT_TRIANGLE_STRIP_ADJ
      };

   struct PrimitiveTopology
      {
      PrimitiveTopologyEnum pte;

      PrimitiveTopology() : pte(PT_TRIANGLE_LIST) {}
      PrimitiveTopology(PrimitiveTopologyEnum a) : pte(a) {}

      PrimitiveTopology& operator=(PrimitiveTopologyEnum a)
         {
         pte = a;
         return *this;
         }
      };


   //Textures
   enum TextureType
      {
      TT_1D,
      TT_2D,
      TT_3D,
      TT_CUBE
      };

   //Texture Sampler
   enum TextureAddressMode
      {
      TA_WRAP,
      TA_MIRROR,
      TA_CLAMP,
      TA_BORDER,
      TA_MIRROR_ONCE
      };

   enum TextureComparisonMethod
      {
      TC_NEVER,
      TC_LESS,
      TC_EQUAL,
      TC_LESS_EQUAL,
      TC_GREATER,
      TC_NOT_EQUAL,
      TC_GREATER_EQUAL,
      TC_ALWAYS
      };

   struct TextureFilter
      {
      bool linearMin, linearMag, linearMip;
      bool anisotropic, comparison;

      TextureFilter() : linearMin(false), linearMag(false), linearMip(false), 
         anisotropic(false), comparison(false) {}
      };

   //Materials
   enum MaterialPassDescriptionOptions
      {
      MPDO_NONE,
      MPDO_VERTEX,
      MPDO_FRAGMENT,
      MPDO_BOTH
      };

   //Windows
   class Window;

   typedef HWND WindowID;

   enum WindowMessage
      {
      EMP_WINDOW_NULL = WM_NULL,
      EMP_WINDOW_CREATE = WM_CREATE,
      EMP_WINDOW_DESTROY = WM_DESTROY,
      EMP_WINDOW_MOVE = WM_MOVE,
      EMP_WINDOW_SIZE = WM_SIZE,
      EMP_WINDOW_ACTIVATE = WM_ACTIVATE,
      EMP_WINDOW_SETFOCUS = WM_SETFOCUS,
      EMP_WINDOW_KILLFOCUS = WM_KILLFOCUS,
      EMP_WINDOW_ENABLE = WM_ENABLE,
      EMP_WINDOW_SETREDRAW = WM_SETREDRAW,
      EMP_WINDOW_SETTEXT = WM_SETTEXT,
      EMP_WINDOW_GETTEXT = WM_GETTEXT,
      EMP_WINDOW_GETTEXTLENGTH = WM_GETTEXTLENGTH,
      EMP_WINDOW_PAINT = WM_PAINT,
      EMP_WINDOW_CLOSE = WM_CLOSE,
      EMP_WINDOW_QUERYENDSESSION = WM_QUERYENDSESSION,
      EMP_WINDOW_QUIT = WM_QUIT,
      EMP_WINDOW_QUERYOPEN = WM_QUERYOPEN,
      EMP_WINDOW_ERASEBKGND = WM_ERASEBKGND,
      EMP_WINDOW_SYSCOLORCHANGE = WM_SYSCOLORCHANGE,
      EMP_WINDOW_ENDSESSION = WM_ENDSESSION,
      EMP_WINDOW_SHOWWINDOW = WM_SHOWWINDOW,
      EMP_WINDOW_WININICHANGE = WM_WININICHANGE,
      EMP_WINDOW_SETTINGCHANGE = WM_SETTINGCHANGE,
      EMP_WINDOW_DEVMODECHANGE = WM_DEVMODECHANGE,
      EMP_WINDOW_ACTIVATEAPP = WM_ACTIVATEAPP,
      EMP_WINDOW_FONTCHANGE = WM_FONTCHANGE,
      EMP_WINDOW_TIMECHANGE = WM_TIMECHANGE,
      EMP_WINDOW_CANCELMODE = WM_CANCELMODE,
      EMP_WINDOW_SETCURSOR = WM_SETCURSOR,
      EMP_WINDOW_MOUSEACTIVATE = WM_MOUSEACTIVATE,
      EMP_WINDOW_CHILDACTIVATE = WM_CHILDACTIVATE,
      EMP_WINDOW_QUEUESYNC = WM_QUEUESYNC,
      EMP_WINDOW_GETMINMAXINFO = WM_GETMINMAXINFO,
      EMP_WINDOW_PAINTICON = WM_PAINTICON,
      EMP_WINDOW_ICONERASEBKGND = WM_ICONERASEBKGND,
      EMP_WINDOW_NEXTDLGCTL = WM_NEXTDLGCTL,
      EMP_WINDOW_SPOOLERSTATUS = WM_SPOOLERSTATUS,
      EMP_WINDOW_DRAWITEM = WM_DRAWITEM,
      EMP_WINDOW_MEASUREITEM = WM_MEASUREITEM,
      EMP_WINDOW_DELETEITEM = WM_DELETEITEM,
      EMP_WINDOW_VKEYTOITEM = WM_VKEYTOITEM,
      EMP_WINDOW_CHARTOITEM = WM_CHARTOITEM,
      EMP_WINDOW_SETFONT = WM_SETFONT,
      EMP_WINDOW_GETFONT = WM_GETFONT,
      EMP_WINDOW_SETHOTKEY = WM_SETHOTKEY,
      EMP_WINDOW_GETHOTKEY = WM_GETHOTKEY,
      EMP_WINDOW_QUERYDRAGICON = WM_QUERYDRAGICON,
      EMP_WINDOW_COMPAREITEM = WM_COMPAREITEM,
      EMP_WINDOW_COMPACTING = WM_COMPACTING,
      EMP_WINDOW_WINDOWPOSCHANGING = WM_WINDOWPOSCHANGING,
      EMP_WINDOW_WINDOWPOSCHANGED = WM_WINDOWPOSCHANGED,
      EMP_WINDOW_POWER = WM_POWER,
      EMP_WINDOW_COPYDATA = WM_COPYDATA,
      EMP_WINDOW_CANCELJOURNAL = WM_CANCELJOURNAL,
      EMP_WINDOW_NOTIFY = WM_NOTIFY,
      EMP_WINDOW_INPUTLANGCHANGEREQUEST = WM_INPUTLANGCHANGEREQUEST,
      EMP_WINDOW_INPUTLANGCHANGE = WM_INPUTLANGCHANGE,
      EMP_WINDOW_TCARD = WM_TCARD,
      EMP_WINDOW_HELP = WM_HELP,
      EMP_WINDOW_USERCHANGED = WM_USERCHANGED,
      EMP_WINDOW_NOTIFYFORMAT = WM_NOTIFYFORMAT,
      EMP_WINDOW_CONTEXTMENU = WM_CONTEXTMENU,
      EMP_WINDOW_STYLECHANGING = WM_STYLECHANGING,
      EMP_WINDOW_STYLECHANGED = WM_STYLECHANGED,
      EMP_WINDOW_DISPLAYCHANGE = WM_DISPLAYCHANGE,
      EMP_WINDOW_GETICON = WM_GETICON,
      EMP_WINDOW_SETICON = WM_SETICON,
      EMP_WINDOW_NCCREATE = WM_NCCREATE,
      EMP_WINDOW_NCDESTROY = WM_NCDESTROY,
      EMP_WINDOW_NCCALCSIZE = WM_NCCALCSIZE,
      EMP_WINDOW_NCHITTEST = WM_NCHITTEST,
      EMP_WINDOW_NCPAINT = WM_NCPAINT,
      EMP_WINDOW_NCACTIVATE = WM_NCACTIVATE,
      EMP_WINDOW_GETDLGCODE = WM_GETDLGCODE,
      EMP_WINDOW_NCMOUSEMOVE = WM_NCMOUSEMOVE,
      EMP_WINDOW_NCLBUTTONDOWN = WM_NCLBUTTONDOWN,
      EMP_WINDOW_NCLBUTTONUP = WM_NCLBUTTONUP,
      EMP_WINDOW_NCLBUTTONDBLCLK = WM_NCLBUTTONDBLCLK,
      EMP_WINDOW_NCRBUTTONDOWN = WM_NCRBUTTONDOWN,
      EMP_WINDOW_NCRBUTTONUP = WM_NCRBUTTONUP,
      EMP_WINDOW_NCRBUTTONDBLCLK = WM_NCRBUTTONDBLCLK,
      EMP_WINDOW_NCMBUTTONDOWN = WM_NCMBUTTONDOWN,
      EMP_WINDOW_NCMBUTTONUP = WM_NCMBUTTONUP,
      EMP_WINDOW_NCMBUTTONDBLCLK = WM_NCMBUTTONDBLCLK,
      EMP_WINDOW_KEYFIRST = WM_KEYFIRST,
      EMP_WINDOW_KEYDOWN = WM_KEYDOWN,
      EMP_WINDOW_KEYUP = WM_KEYUP,
      EMP_WINDOW_CHAR = WM_CHAR,
      EMP_WINDOW_DEADCHAR = WM_DEADCHAR,
      EMP_WINDOW_SYSKEYDOWN = WM_SYSKEYDOWN,
      EMP_WINDOW_SYSKEYUP = WM_SYSKEYUP,
      EMP_WINDOW_SYSCHAR = WM_SYSCHAR,
      EMP_WINDOW_SYSDEADCHAR = WM_SYSDEADCHAR,
      EMP_WINDOW_KEYLAST = WM_KEYLAST,
      EMP_WINDOW_IME_STARTCOMPOSITION = WM_IME_STARTCOMPOSITION,
      EMP_WINDOW_IME_ENDCOMPOSITION = WM_IME_ENDCOMPOSITION,
      EMP_WINDOW_IME_COMPOSITION = WM_IME_COMPOSITION,
      EMP_WINDOW_IME_KEYLAST = WM_IME_KEYLAST,
      EMP_WINDOW_INITDIALOG = WM_INITDIALOG,
      EMP_WINDOW_COMMAND = WM_COMMAND,
      EMP_WINDOW_SYSCOMMAND = WM_SYSCOMMAND,
      EMP_WINDOW_TIMER = WM_TIMER,
      EMP_WINDOW_HSCROLL = WM_HSCROLL,
      EMP_WINDOW_VSCROLL = WM_VSCROLL,
      EMP_WINDOW_INITMENU = WM_INITMENU,
      EMP_WINDOW_INITMENUPOPUP = WM_INITMENUPOPUP,
      EMP_WINDOW_MENUSELECT = WM_MENUSELECT,
      EMP_WINDOW_MENUCHAR = WM_MENUCHAR,
      EMP_WINDOW_ENTERIDLE = WM_ENTERIDLE,
      EMP_WINDOW_CTLCOLORMSGBOX = WM_CTLCOLORMSGBOX,
      EMP_WINDOW_CTLCOLOREDIT = WM_CTLCOLOREDIT,
      EMP_WINDOW_CTLCOLORLISTBOX = WM_CTLCOLORLISTBOX,
      EMP_WINDOW_CTLCOLORBTN = WM_CTLCOLORBTN,
      EMP_WINDOW_CTLCOLORDLG = WM_CTLCOLORDLG,
      EMP_WINDOW_CTLCOLORSCROLLBAR = WM_CTLCOLORSCROLLBAR,
      EMP_WINDOW_CTLCOLORSTATIC = WM_CTLCOLORSTATIC,
      EMP_WINDOW_MOUSEFIRST = WM_MOUSEFIRST,
      EMP_WINDOW_MOUSEMOVE = WM_MOUSEMOVE,
      EMP_WINDOW_LBUTTONDOWN = WM_LBUTTONDOWN,
      EMP_WINDOW_LBUTTONUP = WM_LBUTTONUP,
      EMP_WINDOW_LBUTTONDBLCLK = WM_LBUTTONDBLCLK,
      EMP_WINDOW_RBUTTONDOWN = WM_RBUTTONDOWN,
      EMP_WINDOW_RBUTTONUP = WM_RBUTTONUP,
      EMP_WINDOW_RBUTTONDBLCLK = WM_RBUTTONDBLCLK,
      EMP_WINDOW_MBUTTONDOWN = WM_MBUTTONDOWN,
      EMP_WINDOW_MBUTTONUP = WM_MBUTTONUP,
      EMP_WINDOW_MBUTTONDBLCLK = WM_MBUTTONDBLCLK,
      EMP_WINDOW_MOUSEWHEEL = WM_MOUSEWHEEL,
      EMP_WINDOW_MOUSEHWHEEL = WM_MOUSEHWHEEL,
      EMP_WINDOW_PARENTNOTIFY = WM_PARENTNOTIFY,
      EMP_WINDOW_ENTERMENULOOP = WM_ENTERMENULOOP,
      EMP_WINDOW_EXITMENULOOP = WM_EXITMENULOOP,
      EMP_WINDOW_NEXTMENU = WM_NEXTMENU,
      EMP_WINDOW_SIZING = WM_SIZING,
      EMP_WINDOW_CAPTURECHANGED = WM_CAPTURECHANGED,
      EMP_WINDOW_MOVING = WM_MOVING,
      EMP_WINDOW_POWERBROADCAST = WM_POWERBROADCAST,
      EMP_WINDOW_DEVICECHANGE = WM_DEVICECHANGE,
      EMP_WINDOW_MDICREATE = WM_MDICREATE,
      EMP_WINDOW_MDIDESTROY = WM_MDIDESTROY,
      EMP_WINDOW_MDIACTIVATE = WM_MDIACTIVATE,
      EMP_WINDOW_MDIRESTORE = WM_MDIRESTORE,
      EMP_WINDOW_MDINEXT = WM_MDINEXT,
      EMP_WINDOW_MDIMAXIMIZE = WM_MDIMAXIMIZE,
      EMP_WINDOW_MDITILE = WM_MDITILE,
      EMP_WINDOW_MDICASCADE = WM_MDICASCADE,
      EMP_WINDOW_MDIICONARRANGE = WM_MDIICONARRANGE,
      EMP_WINDOW_MDIGETACTIVE = WM_MDIGETACTIVE,
      EMP_WINDOW_MDISETMENU = WM_MDISETMENU,
      EMP_WINDOW_ENTERSIZEMOVE = WM_ENTERSIZEMOVE,
      EMP_WINDOW_EXITSIZEMOVE = WM_EXITSIZEMOVE,
      EMP_WINDOW_DROPFILES = WM_DROPFILES,
      EMP_WINDOW_MDIREFRESHMENU = WM_MDIREFRESHMENU,
      EMP_WINDOW_IME_SETCONTEXT = WM_IME_SETCONTEXT,
      EMP_WINDOW_IME_NOTIFY = WM_IME_NOTIFY,
      EMP_WINDOW_IME_CONTROL = WM_IME_CONTROL,
      EMP_WINDOW_IME_COMPOSITIONFULL = WM_IME_COMPOSITIONFULL,
      EMP_WINDOW_IME_SELECT = WM_IME_SELECT,
      EMP_WINDOW_IME_CHAR = WM_IME_CHAR,
      EMP_WINDOW_IME_KEYDOWN = WM_IME_KEYDOWN,
      EMP_WINDOW_IME_KEYUP = WM_IME_KEYUP,
      EMP_WINDOW_MOUSEHOVER = WM_MOUSEHOVER,
      EMP_WINDOW_NCMOUSELEAVE = WM_NCMOUSELEAVE,
      EMP_WINDOW_MOUSELEAVE = WM_MOUSELEAVE,
      EMP_WINDOW_CUT = WM_CUT,
      EMP_WINDOW_COPY = WM_COPY,
      EMP_WINDOW_PASTE = WM_PASTE,
      EMP_WINDOW_CLEAR = WM_CLEAR,
      EMP_WINDOW_UNDO = WM_UNDO,
      EMP_WINDOW_RENDERFORMAT = WM_RENDERFORMAT,
      EMP_WINDOW_RENDERALLFORMATS = WM_RENDERALLFORMATS,
      EMP_WINDOW_DESTROYCLIPBOARD = WM_DESTROYCLIPBOARD,
      EMP_WINDOW_DRAWCLIPBOARD = WM_DRAWCLIPBOARD,
      EMP_WINDOW_PAINTCLIPBOARD = WM_PAINTCLIPBOARD,
      EMP_WINDOW_VSCROLLCLIPBOARD = WM_VSCROLLCLIPBOARD,
      EMP_WINDOW_SIZECLIPBOARD = WM_SIZECLIPBOARD,
      EMP_WINDOW_ASKCBFORMATNAME = WM_ASKCBFORMATNAME,
      EMP_WINDOW_CHANGECBCHAIN = WM_CHANGECBCHAIN,
      EMP_WINDOW_HSCROLLCLIPBOARD = WM_HSCROLLCLIPBOARD,
      EMP_WINDOW_QUERYNEWPALETTE = WM_QUERYNEWPALETTE,
      EMP_WINDOW_PALETTEISCHANGING = WM_PALETTEISCHANGING,
      EMP_WINDOW_PALETTECHANGED = WM_PALETTECHANGED,
      EMP_WINDOW_HOTKEY = WM_HOTKEY,
      EMP_WINDOW_PRINT = WM_PRINT,
      EMP_WINDOW_PRINTCLIENT = WM_PRINTCLIENT,
      EMP_WINDOW_HANDHELDFIRST = WM_HANDHELDFIRST,
      EMP_WINDOW_HANDHELDLAST = WM_HANDHELDLAST,
      EMP_WINDOW_PENWINFIRST = WM_PENWINFIRST,
      EMP_WINDOW_PENWINLAST = WM_PENWINLAST,
      EMP_WINDOW_USER = WM_USER,
      EMP_WINDOW_APP = WM_APP
      };

   struct MessagePackage
      {
      Window* win;
      WindowMessage msg;

      MessagePackage(Window* w, WindowMessage m) : win(w), msg(m) {}
      };

   struct WindowClass
      {
      String className;
      };

   }

#endif